short term todo:
- Build system (validate)
- Linting update
- Update config parsing, storage, file layout, etc
    - Doc page about config
- Array type query


todo: should the scitest have a __main__ etc (make it runnable without a shim?)
todo: how should config be handled?

Update query serialization
--------------------------
- File-internal dereferencing/"extends" schema for test suite definitions

- Factor save/load into new module
    - Consistent, reduced API across all file types (query, query set, test, result)
    - Rename module to avoid name conflicts
    - Remove some responsibilities from CLI module; produce more sensible results in load module

- Update cli to use new file specifications / load api

- API questions
    - can serialize/schema/from_serialized be pushed into a Serializable mixin?
    - Can the SERIALIZER_KEY fields become class variables?
    - Why do test suites store component tests as a mapping?
    - Needing to specify iterable[path] args in io module is cumbersome


Repository metadata
-------------------
- Update linter config
- Note: added several linter suppressions; validate these in the future
- Stub out documentation
- Stub out tests suite


Expand query module
-------------------
- Remaining to fix in query module (accompany API standardization)
    - Some aspects of common-type queries need to be fixed
    - Move away from strictyaml
    - expand target file specification
    - Warn if query (class) name is non-unique when registering class?
    - Maybe refactor Query.run_query to remove the weird base -> implementation -> base calling
        - Consider the case of search region functionality. Not easily implemented by inheritance
    - Should register for query/query set defs take *args rather than an iterable?

- Array type queries (for actual psp tests)
    - how to serialize results: link to external file? this breaks the API pretty badly

- Manage the query resolver in a contextmanager
- Merge of query sets? maybe not needed...
- Query sets can contain other query sets (via merge)
    - requires slight schema extension
- do a better job specifying the output file to search


Update CLI and test runners
---------------------------
- display suite results as they are run, not after
    - Requires passing a "printer" to the main runner loop
    - Main runner loop should not be tied up in CLI code

- Able to make program output persistent?
    - Able to run queries on existing program output

- config written with attrs (or similar)
- Explicit entry point for CLI
- Use std lib `pprint` or `textwrap` in main cli


Future plans
------------
- Properties check against their default value
    - prevents need for if (param) is not None: self.param = param boilerplate
- swap '-' for '_' automatically on property deserialization (in the contexts where needed)
- More varied exceptions applied consistently
- Update typing to use 3.11 self type
- refactor queries with attrs; validators can go into metadata fields
- TC queries (hard as it duplicates a similar structure an unknown number of times)
